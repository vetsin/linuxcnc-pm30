# Using LinuxCNC version:  2.8
# Generated by pnconf, then manually setup

loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS
loadrt hostmot2
loadrt hm2_eth board_ip="10.10.10.10" config="num_encoders=1 num_pwmgens=0 num_stepgens=3 sserial_port_0=20xxxx" 
setp    [HMOT](CARD0).watchdog.timeout_ns 5000000
loadrt pid names=pid.x,pid.y,pid.z,pid.s
loadrt mux16 names=jogincr
loadrt or2 count=2

addf [HMOT](CARD0).read       servo-thread
addf motion-command-handler   servo-thread
addf motion-controller        servo-thread
addf pid.x.do-pid-calcs       servo-thread
addf pid.y.do-pid-calcs       servo-thread
addf pid.z.do-pid-calcs       servo-thread
addf pid.s.do-pid-calcs       servo-thread
addf jogincr                  servo-thread
addf or2.0                    servo-thread
addf or2.1                    servo-thread
addf [HMOT](CARD0).write         servo-thread
setp [HMOT](CARD0).dpll.01.timer-us -50
setp [HMOT](CARD0).stepgen.timer-number 1

# external output signals


# LED for MPG
net machine-is-enabled  =>     [HMOT](CARD0).7i76.0.0.output-08
# ESTOP for MPG
net estop-out           =>     [HMOT](CARD0).7i76.0.0.output-09
# COM for MPG
net machine-is-enabled  =>     [HMOT](CARD0).7i76.0.0.output-10
# NC limits - These are estop as they're NO circuits
net estop-out  =>     [HMOT](CARD0).7i76.0.0.output-12
net estop-out  =>     [HMOT](CARD0).7i76.0.0.output-13
net estop-out  =>     [HMOT](CARD0).7i76.0.0.output-14
#net estop-out  =>     [HMOT](CARD0).7i76.0.0.output-15

# external input signals
# Touch Probe
net machine-is-enabled  =>     [HMOT](CARD0).7i76.0.0.output-03
# Z Probe
#  this is on estop as overtravel on probe is a limit switch
net estop-out  =>     [HMOT](CARD0).7i76.0.0.output-00
net machine-is-enabled  =>     [HMOT](CARD0).7i76.0.0.output-01


# --- JOINT-SELECT-A ---
net axis-select-x     <=  [HMOT](CARD0).7i76.0.0.input-20
# --- JOINT-SELECT-B ---
net axis-select-y     <=  [HMOT](CARD0).7i76.0.0.input-21
# --- JOINT-SELECT-C ---
net axis-select-z     <=  [HMOT](CARD0).7i76.0.0.input-22
# --- JOG-INCR-A ---
net jog-incr-a         <=  [HMOT](CARD0).7i76.0.0.input-23
# --- JOG-INCR-B ---
net jog-incr-b         <=  [HMOT](CARD0).7i76.0.0.input-24
# --- JOG-INCR-C ---
net jog-incr-c         <=  [HMOT](CARD0).7i76.0.0.input-25
# --- ESTOP-EXT ---
net estop-ext          <=  [HMOT](CARD0).7i76.0.0.input-26

#*******************
#  AXIS X JOINT 0
#*******************

setp   pid.x.Pgain     [JOINT_0]P
setp   pid.x.Igain     [JOINT_0]I
setp   pid.x.Dgain     [JOINT_0]D
setp   pid.x.bias      [JOINT_0]BIAS
setp   pid.x.FF0       [JOINT_0]FF0
setp   pid.x.FF1       [JOINT_0]FF1
setp   pid.x.FF2       [JOINT_0]FF2
setp   pid.x.deadband  [JOINT_0]DEADBAND
setp   pid.x.maxoutput [JOINT_0]MAX_OUTPUT
setp   pid.x.error-previous-target true
# This setting is to limit bogus stepgen
# velocity corrections caused by position
# feedback sample time jitter.
setp   pid.x.maxerror 0.000500

net x-index-enable  =>  pid.x.index-enable
net x-enable        =>  pid.x.enable
net x-pos-cmd       =>  pid.x.command
net x-pos-fb        =>  pid.x.feedback
net x-output        <=  pid.x.output

# Step Gen signals/setup

setp   [HMOT](CARD0).stepgen.00.dirsetup         [JOINT_0]DIRSETUP
setp   [HMOT](CARD0).stepgen.00.dirhold          [JOINT_0]DIRHOLD
setp   [HMOT](CARD0).stepgen.00.steplen          [JOINT_0]STEPLEN
setp   [HMOT](CARD0).stepgen.00.stepspace        [JOINT_0]STEPSPACE
setp   [HMOT](CARD0).stepgen.00.position-scale   [JOINT_0]STEP_SCALE
setp   [HMOT](CARD0).stepgen.00.step_type        0
setp   [HMOT](CARD0).stepgen.00.control-type     1
setp   [HMOT](CARD0).stepgen.00.maxaccel         [JOINT_0]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.00.maxvel           [JOINT_0]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net x-pos-cmd    <= joint.0.motor-pos-cmd
net x-vel-cmd    <= joint.0.vel-cmd
net x-output     => [HMOT](CARD0).stepgen.00.velocity-cmd
net x-pos-fb     <= [HMOT](CARD0).stepgen.00.position-fb
net x-pos-fb     => joint.0.motor-pos-fb
net x-enable     <= joint.0.amp-enable-out
net x-enable     => [HMOT](CARD0).stepgen.00.enable

# ---setup home / limit switch signals---
# I probably should re-wire so the order makes sense, but easier to do it in code
net limit-x     <=  [HMOT](CARD0).7i76.0.0.input-04-not
net limit-y     <=  [HMOT](CARD0).7i76.0.0.input-06-not
net limit-z-sw <=  [HMOT](CARD0).7i76.0.0.input-05-not
net limit-z-sw => or2.0.in0

# home-sw-in driven TRUE when closed
# my X limit is in the middle, so it triggers both ways
net limit-x     =>  joint.0.home-sw-in joint.0.neg-lim-sw-in joint.0.pos-lim-sw-in 
net limit-y     =>  joint.1.home-sw-in joint.1.neg-lim-sw-in
net or-limit-z or2.0.out  =>  joint.2.home-sw-in joint.2.neg-lim-sw-in

#*******************
#  AXIS Y JOINT 1
#*******************

setp   pid.y.Pgain     [JOINT_1]P
setp   pid.y.Igain     [JOINT_1]I
setp   pid.y.Dgain     [JOINT_1]D
setp   pid.y.bias      [JOINT_1]BIAS
setp   pid.y.FF0       [JOINT_1]FF0
setp   pid.y.FF1       [JOINT_1]FF1
setp   pid.y.FF2       [JOINT_1]FF2
setp   pid.y.deadband  [JOINT_1]DEADBAND
setp   pid.y.maxoutput [JOINT_1]MAX_OUTPUT
setp   pid.y.error-previous-target true
# This setting is to limit bogus stepgen
# velocity corrections caused by position
# feedback sample time jitter.
setp   pid.y.maxerror  0.000500

net y-index-enable  =>  pid.y.index-enable
net y-enable        =>  pid.y.enable
net y-pos-cmd       =>  pid.y.command
net y-pos-fb        =>  pid.y.feedback
net y-output        <=  pid.y.output

# Step Gen signals/setup

setp   [HMOT](CARD0).stepgen.01.dirsetup        [JOINT_1]DIRSETUP
setp   [HMOT](CARD0).stepgen.01.dirhold         [JOINT_1]DIRHOLD
setp   [HMOT](CARD0).stepgen.01.steplen         [JOINT_1]STEPLEN
setp   [HMOT](CARD0).stepgen.01.stepspace       [JOINT_1]STEPSPACE
setp   [HMOT](CARD0).stepgen.01.position-scale  [JOINT_1]STEP_SCALE
setp   [HMOT](CARD0).stepgen.01.step_type       0
setp   [HMOT](CARD0).stepgen.01.control-type    1
setp   [HMOT](CARD0).stepgen.01.maxaccel        [JOINT_1]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.01.maxvel          [JOINT_1]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net y-pos-cmd    <= joint.1.motor-pos-cmd
net y-vel-cmd    <= joint.1.vel-cmd
net y-output     => [HMOT](CARD0).stepgen.01.velocity-cmd
net y-pos-fb     <= [HMOT](CARD0).stepgen.01.position-fb
net y-pos-fb     => joint.1.motor-pos-fb
net y-enable     <= joint.1.amp-enable-out
net y-enable     => [HMOT](CARD0).stepgen.01.enable


#*******************
#  AXIS Z JOINT 2
#*******************

setp   pid.z.Pgain     [JOINT_2]P
setp   pid.z.Igain     [JOINT_2]I
setp   pid.z.Dgain     [JOINT_2]D
setp   pid.z.bias      [JOINT_2]BIAS
setp   pid.z.FF0       [JOINT_2]FF0
setp   pid.z.FF1       [JOINT_2]FF1
setp   pid.z.FF2       [JOINT_2]FF2
setp   pid.z.deadband  [JOINT_2]DEADBAND
setp   pid.z.maxoutput [JOINT_2]MAX_OUTPUT
setp   pid.z.error-previous-target true
# This setting is to limit bogus stepgen
# velocity corrections caused by position
# feedback sample time jitter.
setp   pid.z.maxerror  0.000500

net z-index-enable  =>  pid.z.index-enable
net z-enable        =>  pid.z.enable
net z-pos-cmd       =>  pid.z.command
net z-pos-fb        =>  pid.z.feedback
net z-output        <=  pid.z.output

# Step Gen signals/setup

setp   [HMOT](CARD0).stepgen.02.dirsetup         [JOINT_2]DIRSETUP
setp   [HMOT](CARD0).stepgen.02.dirhold          [JOINT_2]DIRHOLD
setp   [HMOT](CARD0).stepgen.02.steplen          [JOINT_2]STEPLEN
setp   [HMOT](CARD0).stepgen.02.stepspace        [JOINT_2]STEPSPACE
setp   [HMOT](CARD0).stepgen.02.position-scale   [JOINT_2]STEP_SCALE
setp   [HMOT](CARD0).stepgen.02.step_type        0
setp   [HMOT](CARD0).stepgen.02.control-type     1
setp   [HMOT](CARD0).stepgen.02.maxaccel         [JOINT_2]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.02.maxvel           [JOINT_2]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net z-pos-cmd    <= joint.2.motor-pos-cmd
net z-vel-cmd    <= joint.2.vel-cmd
net z-output     => [HMOT](CARD0).stepgen.02.velocity-cmd
net z-pos-fb     <= [HMOT](CARD0).stepgen.02.position-fb
net z-pos-fb     => joint.2.motor-pos-fb
net z-enable     <= joint.2.amp-enable-out
net z-enable     => [HMOT](CARD0).stepgen.02.enable



#******************************
# connect miscellaneous signals
#******************************

#  ---HALUI signals---

net axis-select-x         halui.axis.x.select
net jog-x-pos             halui.axis.x.plus
net jog-x-neg             halui.axis.x.minus
net jog-x-analog          halui.axis.x.analog
net x-is-homed            halui.joint.0.is-homed
net axis-select-y         halui.axis.y.select
net jog-y-pos             halui.axis.y.plus
net jog-y-neg             halui.axis.y.minus
net jog-y-analog          halui.axis.y.analog
net y-is-homed            halui.joint.1.is-homed
net axis-select-z         halui.axis.z.select
net jog-z-pos             halui.axis.z.plus
net jog-z-neg             halui.axis.z.minus
net jog-z-analog          halui.axis.z.analog
net z-is-homed            halui.joint.2.is-homed
net jog-selected-pos      halui.axis.selected.plus
net jog-selected-neg      halui.axis.selected.minus
net spindle-manual-cw     halui.spindle.0.forward
net spindle-manual-ccw    halui.spindle.0.reverse
net spindle-manual-stop   halui.spindle.0.stop
net machine-is-on         halui.machine.is-on
net select-jog-incr       halui.axis.jog-speed
#net jog-speed             halui.axis.jog-speed
net MDI-mode              halui.mode.is-mdi

#  ---coolant signals---
net coolant-mist      <=  iocontrol.0.coolant-mist
net coolant-flood     <=  iocontrol.0.coolant-flood

#  ---probe signal---
#  Green = 13
#  Red = 14
#  Black = 15
#  Yellow = 16
net probe-in <= [HMOT](CARD0).7i76.0.0.input-13
net probe-in => or2.1.in0
net ztouch-normal <= [HMOT](CARD0).7i76.0.0.input-14-not
net ztouch-normal => or2.1.in1
net ztouch-overtravel <= [HMOT](CARD0).7i76.0.0.input-15-not
net ztouch-overtravel => or2.0.in1


net touchoff or2.1.out     =>  motion.probe-input

# ---jogwheel signals to mesa encoder - shared MPG---

net axis-selected-count     <=  [HMOT](CARD0).7i76.0.0.enc0.count

#  ---mpg signals---
#  veloity mode 1 == axis stops when dial is stopped, no matter the commanded motion
setp    axis.x.jog-vel-mode 0
setp    axis.y.jog-vel-mode 0
setp    axis.z.jog-vel-mode 0

#       for axis x MPG
net selected-jog-incr   =>  axis.x.jog-scale joint.0.jog-scale
net axis-select-x       =>  axis.x.jog-enable joint.0.jog-enable
net axis-selected-count =>  axis.x.jog-counts joint.0.jog-counts

#       for axis y MPG
net selected-jog-incr   =>  axis.y.jog-scale joint.1.jog-scale
net axis-select-y       =>  axis.y.jog-enable joint.1.jog-enable
net axis-selected-count =>  axis.y.jog-counts joint.1.jog-counts

#       for axis z MPG
net selected-jog-incr   =>  axis.z.jog-scale joint.2.jog-scale
net axis-select-z       =>  axis.z.jog-enable joint.2.jog-enable
net axis-selected-count =>  axis.z.jog-counts joint.2.jog-counts


# connect selectable mpg jog increments 

net jog-incr-a           =>  jogincr.sel0
net jog-incr-b           =>  jogincr.sel1
net jog-incr-c           =>  jogincr.sel2
net jog-incr-d           =>  jogincr.sel3
net selected-jog-incr    <=  jogincr.out-f
    setp jogincr.debounce-time      0.200000
    setp jogincr.use-graycode      False
    setp jogincr.suppress-no-input False
    #setp jogincr.suppress-no-input True
    setp jogincr.in00          0.0
    setp jogincr.in01          0.1
    setp jogincr.in02          0.01
    # not sure why it skips 3...
    #setp jogincr.in03          0.4
    setp jogincr.in04          0.001
    #setp jogincr.in05          0.6
    #setp jogincr.in06          0.050000
    #setp jogincr.in07          0.100000
    #setp jogincr.in08          0.125000
    #setp jogincr.in09          0.125000
    #setp jogincr.in10          0.125000
    #setp jogincr.in11          0.125000
    #setp jogincr.in12          0.125000
    #setp jogincr.in13          0.125000
    #setp jogincr.in14          0.125000
    #setp jogincr.in15          0.125000

#  ---motion control signals---

net in-position               <=  motion.in-position
net machine-is-enabled        <=  motion.motion-enabled

#  ---digital in / out signals---

#  ---estop signals---

net estop-out     <=  iocontrol.0.user-enable-out
net estop-ext     =>  iocontrol.0.emc-enable-in

#  ---manual tool change signals---

loadusr -W hal_manualtoolchange
net tool-change-request     iocontrol.0.tool-change       =>  hal_manualtoolchange.change
net tool-change-confirmed   iocontrol.0.tool-changed      <=  hal_manualtoolchange.changed
net tool-number             iocontrol.0.tool-prep-number  =>  hal_manualtoolchange.number
net tool-prepare-loopback   iocontrol.0.tool-prepare      =>  iocontrol.0.tool-prepared

